name: CI/CD Pipeline

on:
  workflow_run:
    workflows: ["E2E Workflow"]
    types:
      - completed

jobs:
  setup-java:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      java-version: '21'
    steps:
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

  build-order-service:
    needs: setup-java
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Backend/Services/Order Service
    steps:
      - uses: actions/checkout@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Order Service JAR
        run: ./gradlew clean build

  build-delivery-service:
    needs: setup-java
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Backend/Services/Delivery Service
    services: # <--- SERVICE CONTAINER VOOR MONGO
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017
        env: # <--- MONGO INIT VARIABLES
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }} 
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }} 
          MONGO_INITDB_DATABASE: deliveries
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Delivery Service JAR
        env:
          OAUTH2_JWT_AUDIENCES: ${{ secrets.OAUTH2_JWT_AUDIENCES }}
          OAUTH2_JWT_ISSUER_URI: ${{ secrets.OAUTH2_JWT_ISSUER_URI }}
          MONGO_INITDB_URI:  ${{ secrets.MONGO_INITDB_URI }}
        run: ./gradlew clean build

  calculate-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version_step.outputs.new_docker_version }}
    steps:
      - name: Checkout code for versioning
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Calculate Next Docker Version
        id: version_step
        run: |
          set -e # Stop script on error
          
          # 1. Get all tags from remote
          git fetch --tags -f
          
          # 2. find the latest semantic Git-tag (X.Y.Z format)
          LATEST_GIT_TAG=$(git tag --list '[0-9]*\.[0-9]*\.[0-9]*' --sort=-v:refname | head -n 1)
          
          # 3. Decide the new version
          if [ -z "$LATEST_GIT_TAG" ]; then
            NEW_DOCKER_VERSION="1.0.0"
          else
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST_GIT_TAG"
            PATCH=$((PATCH + 1))
            NEW_DOCKER_VERSION="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "Latest Git-tag: $LATEST_GIT_TAG"
          echo "New Docker version becomes: $NEW_DOCKER_VERSION"
          
          # Set new VERSION as output
          echo "new_docker_version=$NEW_DOCKER_VERSION" >> $GITHUB_OUTPUT

  push-order-service:
    needs: [build-order-service, calculate-version]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Backend/Services
    steps:
      - uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Order Service Image
        run: |
          VERSION=${{ needs.calculate-version.outputs.new_version }}
          echo "Use version $VERSION for order-service"
          docker build -t docker.io/494690/order-service:${VERSION} "Order Service"
          docker push docker.io/494690/order-service:${VERSION}

  push-delivery-service:
    needs: [build-delivery-service, calculate-version]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: Backend/Services
    steps:
      - uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Delivery Service Image
        run: |
          VERSION=${{ needs.calculate-version.outputs.new_version }}
          echo "Use version $VERSION for delivery-service"
          docker build -t docker.io/494690/delivery-service:${VERSION} "Delivery Service"
          docker push docker.io/494690/delivery-service:${VERSION}
