name: E2E Workflow

on:
  push:
    branches: [master]
  pull_request:

jobs:
  e2e:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:24.0.5
        options: --privileged

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Start application with Docker Compose
        run: docker compose -f ./Backend/Services/docker-compose.yml up -d --build

      - name: Wait for services to start
        run: sleep 30

      - name: Step 1 - Create delivery
        run: |
          curl -i -X POST http://localhost:8000/orders/api/orderService/createDelivery \
               -H "Content-Type: application/json" \
               -d '{"id": "1","customerName": "Peter","address": "Boeksbrug","status": "Created"}'

      - name: Debug - Check RabbitMQ queues
        run: docker compose -f ./Backend/Services/docker-compose.yml exec rabbitmq rabbitmqctl list_queues

      - name: Step 2 - Verify delivery is created (script)
        run: |
          cd Backend/Services/Delivery\ Service
          chmod +x ./gradlew
          ./gradlew e2eTest -Dspring.profiles.active=test --tests "com.swiftbite.services.deliveryService.E2EtestScripts.DeliveryCreatedTest"

      - name: Debug - Check deliveryByOrder response
        run: |
          echo "🔍 Checking deliveryByOrder response..."
          curl -s "http://localhost:8000/deliveries/api/deliveryservice/deliveryByOrder/1"

      - name: Step 3 - Get delivery ID from orderId
        id: get_delivery_id
        run: |
          DELIVERY_ID=$(curl -s "http://localhost:8000/deliveries/api/deliveryservice/deliveryByOrder/1" | jq -r '.id')
          echo "DELIVERY_ID=$DELIVERY_ID" >> $GITHUB_ENV

      - name: Debug - Print DELIVERY_ID
        run: |
          echo "DELIVERY_ID is: ${{ env.DELIVERY_ID }}"


      - name: Step 4 - Assign driver to delivery
        run: |
          curl -X POST http://localhost:8000/deliveries/api/deliveryservice/assignDeliverer \
               -H "Content-Type: application/json" \
               -d '{"deliveryId": "${{ env.DELIVERY_ID }}", "deliverer": {"name": "piet", "phone": "0612324444"}}'

      - name: Step 5 - Verify delivery is assigned to driver (script)
        run: |
          cd Backend/Services/Delivery\ Service
          chmod +x ./gradlew
          ./gradlew e2eTest -Dspring.profiles.active=test --tests "com.swiftbite.services.deliveryService.E2EtestScripts.DelivererAssignedTest"


      - name: Step 6 - Complete the delivery
        run: |
          curl -X POST http://localhost:8000/deliveries/api/deliveryservice/completeDelivery/${{ env.DELIVERY_ID }}

      - name: Step 7 - Validate delivery is marked as complete (script)
        run: |
          cd Backend/Services/Delivery\ Service
          chmod +x ./gradlew
          ./gradlew e2eTest -Dspring.profiles.active=test --tests "com.swiftbite.services.deliveryService.E2EtestScripts.DeliveryCompletedTest"

      - name: Step 8 - Check OrderService received message
        run: |
          docker compose logs orderservice > orderservice.log
          grep "Received delivery complete for order: 1" orderservice.log

      - name: Cleanup
        if: always()  # Runs even if earlier steps fail
        run: |
          echo "Cleaning up..."
          docker-compose down -v
          rm -f orderservice.log || true

